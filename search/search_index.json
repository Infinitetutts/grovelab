{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to Grovelab\n\n\nDevOps, SysAdmin and Linux Wiki <3\n\n\nFound any errors? Submit a pull request\n\n\nRaw Files\n\n\nUpdate mark down language files\n\n\nIf you would like contribute more\n\nSetup the development enviroment: \n\nmkdocs-grovelab",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-grovelab",
            "text": "",
            "title": "Welcome to Grovelab"
        },
        {
            "location": "/#devops-sysadmin-and-linux-wiki-3",
            "text": "Found any errors? Submit a pull request  Raw Files  Update mark down language files  If you would like contribute more \nSetup the development enviroment:  mkdocs-grovelab",
            "title": "DevOps, SysAdmin and Linux Wiki &lt;3"
        },
        {
            "location": "/linux-sysadmin/",
            "text": "DDOS Mitigation Process\n\n\nWorking with Logs, IpTables, Apache, Wordpress logins\n\n\nLook at top IP addresses in your access log use:\n\n\ntail -n 10000 access.log|cut -f 1 -d ' '|sort|uniq -c|sort -nr|more \n\n\n\n\nIf nothing looks suspicious in IP the list, use this query to check top hit URLs on your box:\n\n\ncut -f 2 -d '\"' access.log|cut -f 2 -d ' '|sort|uniq -c|sort -nr|more \n\n\n\n\nCheck for common user agents :\n \n\n\ncut -f 4 -d '\"' access.log|sort|uniq -c|sort -nr|more \n\n\n\n\nGet IP's of established connections\n\n\nnetstat -an|grep ESTABLISHED|awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|awk '{ printf(\"%s\\t%s\\t\",$2,$1); for (i = 0; i < $1; i++) {printf(\"*\")}; print \"\"}' \n\n\n\n\nView Apache requests per day\n\n\ncd /var/log/apache2 \nawk '{print $4}' access.log | cut -d: -f1 | uniq -c \n\n\n\n\nView Apache requests per hour\n\n\ncd /var/log/apache2 \ngrep \"29/Feb\" access.log | cut -d[ -f2 | cut -d] -f1 | awk -F: '{print $2\":00\"}' | sort -n | uniq -c \n\n\n\n\nView Apache requests per minute\n\n\ncd /var/log/apache2 \ngrep \"29/Feb/2016:06\" access.log | cut -d[ -f2 | cut -d] -f1 | awk -F: '{print $2\":\"$3}' | sort -nk1 -nk2 | uniq -c | awk '{ if ($1 > 10) print $0}' \n\n\n\n\nView WordPress login and hacking attempts\n\n\negrep \"POST .*wp-login.php\" access.log | awk '{print $1,$4,$5,$6,$7,substr($0, index($0,$12))}' | awk '{print $1}' | sort -n | uniq -c | sort -n | sed 's/[ ]*//' \negrep \"POST .*xmlrpc.php\" access.log | awk '{print $1,$4,$5,$6,$7,substr($0, index($0,$12))}' | awk '{print $1}' | sort -n | uniq -c | sort -n | sed 's/[ ]*//' \n\n\n\n\nNumber of failed ssh login attempts\n\n\nzcat /var/log/auth.log* | grep 'Failed password' | grep sshd | awk '{print $1,$2}' | sort -k 1,1M -k 2n | uniq -c \n\n\n\n\nDDos mitigation by limiting connections\n\n\niptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT \n\n\n\n\n-m limit\n This uses the limit iptables extension.  \n\n\n--limit 25/minute\n This limits only maximum of 25 connection per minute. Change this value based on your specific requirement. \n\n\n--limit-burst 100\n This value indicates that the limit/minute will be enforced only after the total number of connection have reached the limit-burst level.   \n\n\nBlock an IP on iptables:\n\n\niptables -A INPUT -s <IPADRESS> -j DROP/REJECT  \n\n\n\n\nExample\n\n\niptables -A INPUT -s 192.168.1.1 -j DROP/REJECT \n\n\n\n\nSave and Restart\n\n\nservice iptables restart \nservice iptables save \nsudo service apache2 restart  \n\n\n\n\nRemove sudo password prompt\n\n\nOpen sudoers config file\n\n\nsudo visudo \n\n\n\n\nEdit or Add the group the user is apart of. All users in this group passwords will be removed\n\n\n%sudo ALL=(ALL) NOPASSWD: ALL \n\n\n\n\nSSH Key Based Authentication and Create Config\n\n\nGenerate ssh key\n\n\nssh-keygen -C \"your_email@example.com\"\n\n\nGenerate secure ssh key\n\n\nssh-keygen -o -a 100 -t ed25519 -C \"your_email@example.com\"\n\n\n\n\n-C\n Comment - Use any identifier: name/username/email/etc\n\n\nCopy SSH key from pc to server\n\n\nssh-copy-id username@remote_host \n\n\n\n\nCreate config for a quick way to connect via ssh\n\n\nvi /home/john/.ssh/config \n\nHost iandi\nHostName iandi.co.za\nUser john\nIdentityFile /home/john/.ssh/iandi \n\n\n\n\nYour config file you just created will allow you to connect via SSH much faster\n\n\nssh iandi \n\n\n\n\nAutomatically Start script on reboot\n\n\nCreate script\n\n\nsudo vi /etc/init.d/script.sh \nsudo chmod 755 /etc/init.d/script.sh\n\n\n\n\nSet script to start automatically on boot with\n\nCentos\n\n\nsudo chkconfig --add script.sh \n\n\n\n\nEnable script on run levels\n\n\nsudo chkconfig --level 2345 script.sh on \n\n\n\n\nCheck the script is indeed enabled - you should see \"on\" for the levels you selected.\n\n\nsudo chkconfig --list | grep script.sh \n\n\n\n\nRemove script from startup chkconfig --del script.sh\n\nUbuntu\n\n\nsudo update-rc.d script.sh defaults \n\n\n\n\nRemove script from startup\n\n\nupdate-rc.d -f script.sh remove \n\n\n\n\nCheck the script is indeed enabled\n\n\nservice --status-all \n\n\n\n\n[ + ]\n Services with this sign are currently running.\n\n\n[ \u2013 ]\n Services with this sign are not currently running. \n\n\n[ ? ]\n Services that do not have a status switch. \n\n\nDelete clean cache to free up memory\n\n\nWriting to this will cause the kernel to drop clean caches, as well as reclaimable slab objects like dentries and inodes. Once dropped, their memory becomes free.\n\n\nTo free pagecache:\n\n\nsync;echo 1 > /proc/sys/vm/drop_caches\n\n\n\n\nTo free reclaimable slab objects (includes dentries and inodes):\n\n\nsync;echo 2 > /proc/sys/vm/drop_caches\n\n\n\n\nTo free slab objects and pagecache:\n\n\nsync;echo 3 > /proc/sys/vm/drop_caches\n\n\n\n\nThis is a non-destructive operation and will not free any dirty objects. Use of this file can cause performance problems. Since it discards cached objects, it may cost a significant amount of I/O and CPU to recreate the dropped objects, especially if they were under heavy use.\n\n\n\u201csync\u201d only makes dirty cache to clean cache. cache is still preserved. drop_caches doesn\u2019t touch dirty caches and only drops clean caches. So to make all memory free, it is necessary to do sync first before drop_caches in case flushing daemons hasn\u2019t written the changes to disk.\n\n\nEasy SMTP Server Setup\n\n\nsudo apt-get install sendmail \nsudo sendmailconfig \n\n\n\n\nUFW Disable IPv6 rules\n\n\nsudo vim /etc/default/ufw \nIPV6=no",
            "title": "Linux sysadmin"
        },
        {
            "location": "/linux-sysadmin/#ddos-mitigation-process",
            "text": "",
            "title": "DDOS Mitigation Process"
        },
        {
            "location": "/linux-sysadmin/#working-with-logs-iptables-apache-wordpress-logins",
            "text": "Look at top IP addresses in your access log use:  tail -n 10000 access.log|cut -f 1 -d ' '|sort|uniq -c|sort -nr|more   If nothing looks suspicious in IP the list, use this query to check top hit URLs on your box:  cut -f 2 -d '\"' access.log|cut -f 2 -d ' '|sort|uniq -c|sort -nr|more   Check for common user agents :    cut -f 4 -d '\"' access.log|sort|uniq -c|sort -nr|more   Get IP's of established connections  netstat -an|grep ESTABLISHED|awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|awk '{ printf(\"%s\\t%s\\t\",$2,$1); for (i = 0; i < $1; i++) {printf(\"*\")}; print \"\"}'   View Apache requests per day  cd /var/log/apache2 \nawk '{print $4}' access.log | cut -d: -f1 | uniq -c   View Apache requests per hour  cd /var/log/apache2 \ngrep \"29/Feb\" access.log | cut -d[ -f2 | cut -d] -f1 | awk -F: '{print $2\":00\"}' | sort -n | uniq -c   View Apache requests per minute  cd /var/log/apache2 \ngrep \"29/Feb/2016:06\" access.log | cut -d[ -f2 | cut -d] -f1 | awk -F: '{print $2\":\"$3}' | sort -nk1 -nk2 | uniq -c | awk '{ if ($1 > 10) print $0}'   View WordPress login and hacking attempts  egrep \"POST .*wp-login.php\" access.log | awk '{print $1,$4,$5,$6,$7,substr($0, index($0,$12))}' | awk '{print $1}' | sort -n | uniq -c | sort -n | sed 's/[ ]*//' \negrep \"POST .*xmlrpc.php\" access.log | awk '{print $1,$4,$5,$6,$7,substr($0, index($0,$12))}' | awk '{print $1}' | sort -n | uniq -c | sort -n | sed 's/[ ]*//'   Number of failed ssh login attempts  zcat /var/log/auth.log* | grep 'Failed password' | grep sshd | awk '{print $1,$2}' | sort -k 1,1M -k 2n | uniq -c   DDos mitigation by limiting connections  iptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT   -m limit  This uses the limit iptables extension.    --limit 25/minute  This limits only maximum of 25 connection per minute. Change this value based on your specific requirement.   --limit-burst 100  This value indicates that the limit/minute will be enforced only after the total number of connection have reached the limit-burst level.     Block an IP on iptables:  iptables -A INPUT -s <IPADRESS> -j DROP/REJECT    Example  iptables -A INPUT -s 192.168.1.1 -j DROP/REJECT   Save and Restart  service iptables restart \nservice iptables save \nsudo service apache2 restart",
            "title": "Working with Logs, IpTables, Apache, Wordpress logins"
        },
        {
            "location": "/linux-sysadmin/#remove-sudo-password-prompt",
            "text": "Open sudoers config file  sudo visudo   Edit or Add the group the user is apart of. All users in this group passwords will be removed  %sudo ALL=(ALL) NOPASSWD: ALL",
            "title": "Remove sudo password prompt"
        },
        {
            "location": "/linux-sysadmin/#ssh-key-based-authentication-and-create-config",
            "text": "Generate ssh key  ssh-keygen -C \"your_email@example.com\"  Generate secure ssh key  ssh-keygen -o -a 100 -t ed25519 -C \"your_email@example.com\"  -C  Comment - Use any identifier: name/username/email/etc  Copy SSH key from pc to server  ssh-copy-id username@remote_host   Create config for a quick way to connect via ssh  vi /home/john/.ssh/config \n\nHost iandi\nHostName iandi.co.za\nUser john\nIdentityFile /home/john/.ssh/iandi   Your config file you just created will allow you to connect via SSH much faster  ssh iandi",
            "title": "SSH Key Based Authentication and Create Config"
        },
        {
            "location": "/linux-sysadmin/#automatically-start-script-on-reboot",
            "text": "Create script  sudo vi /etc/init.d/script.sh \nsudo chmod 755 /etc/init.d/script.sh  Set script to start automatically on boot with \nCentos  sudo chkconfig --add script.sh   Enable script on run levels  sudo chkconfig --level 2345 script.sh on   Check the script is indeed enabled - you should see \"on\" for the levels you selected.  sudo chkconfig --list | grep script.sh   Remove script from startup chkconfig --del script.sh \nUbuntu  sudo update-rc.d script.sh defaults   Remove script from startup  update-rc.d -f script.sh remove   Check the script is indeed enabled  service --status-all   [ + ]  Services with this sign are currently running.  [ \u2013 ]  Services with this sign are not currently running.   [ ? ]  Services that do not have a status switch.",
            "title": "Automatically Start script on reboot"
        },
        {
            "location": "/linux-sysadmin/#delete-clean-cache-to-free-up-memory",
            "text": "Writing to this will cause the kernel to drop clean caches, as well as reclaimable slab objects like dentries and inodes. Once dropped, their memory becomes free.  To free pagecache:  sync;echo 1 > /proc/sys/vm/drop_caches  To free reclaimable slab objects (includes dentries and inodes):  sync;echo 2 > /proc/sys/vm/drop_caches  To free slab objects and pagecache:  sync;echo 3 > /proc/sys/vm/drop_caches  This is a non-destructive operation and will not free any dirty objects. Use of this file can cause performance problems. Since it discards cached objects, it may cost a significant amount of I/O and CPU to recreate the dropped objects, especially if they were under heavy use.  \u201csync\u201d only makes dirty cache to clean cache. cache is still preserved. drop_caches doesn\u2019t touch dirty caches and only drops clean caches. So to make all memory free, it is necessary to do sync first before drop_caches in case flushing daemons hasn\u2019t written the changes to disk.",
            "title": "Delete clean cache to free up memory"
        },
        {
            "location": "/linux-sysadmin/#easy-smtp-server-setup",
            "text": "sudo apt-get install sendmail \nsudo sendmailconfig",
            "title": "Easy SMTP Server Setup"
        },
        {
            "location": "/linux-sysadmin/#ufw-disable-ipv6-rules",
            "text": "sudo vim /etc/default/ufw \nIPV6=no",
            "title": "UFW Disable IPv6 rules"
        },
        {
            "location": "/linux-commands/",
            "text": "Find\n\n\nFind all matching files and replace with new file\n\n\nfind ~/ -type f -iname \"gameme.smx\" | while read line\ndo\n  cp -v gameme.smx $line\ndone\n\n\n\n\nFind and remove permissions\n\n\nfind . -type f -iname \"*.ini\" -exec chmod -x {} \\;\n\n\n\n\nFind files and grep\n\n\nfind ~/ -type f -name \"autoexec.cfg\" -exec cat {} | grep 'log_address' \\;\n\n\n\n\nFind and replace text in multiple files\n\n\nsed -i 's/\"findtext\"/\"replacetext\"/g' *\n\n\n\n\nFind text and replace the entire line\n\n\nsed -i 's/\"^findtext.*\"/\"replacetext\"/g' *\n\n\n\n\nDelete a specific subfolder within all directories\n\n\necho ~/john/*/csgo/csgo/ | xargs -n 1 rm -r \n\n\n\n\nCopy a specific sub directory from all directories.\n\n\necho ~/john/*/ | xargs -n 1 cp -R csgo/\n\n\n\n\nThe -i option of cp command means that you will be asked whether to overwrite a file\n\n\nFind empty files and delete\n\n\nfind /tmp -type f -empty -delete\n\n\n\n\nFind and replace string\n\n\nfind . -type f -name \"gamemode_comp*\" -exec sed -i 's/123/dfg/g' {} + \n\n\n\n\nListening on Ports, Traffic Network connections\n\n\nFind port of runnin application\n\n\nnetstat -lnp | grep ts3\nnetstat -l -a -p -n  \n\n\n\n\nFind appliction listening on a port\n\n\nsudo lsof -i :80\n\n\n\n\nMonitor live Network connections and traffic\n\n\nsudo tcptrack -i eth0 -r 5 \n\n\n\n\nHardware info\n\n\nAll hardware info\n\n\nsudo lshw | less\n\n\n\n\nMotherbaord\n\n\nsudo lshw -c system\n\n\n\n\nNetwork\n\n\nsudo lshw -C network\n\n\n\n\nCPU\n\n\nsudo lscpu \n\n\n\n\nPCI (GPU info here as well)\n\n\nsudo lspci \n\n\n\n\nMemory\n\n\nfree -h \n\n\n\n\nClone/Download a website\n\n\nwget --limit-rate=200k --no-clobber --convert-links --random-wait -r -p -E -e robots=off -U mozilla http://www.kossboss.com \n\n\n\n\nBackup all changed config files\n\n\ndebsums -ce | tar --files-from=- -cf configs.tar \n\n\n\n\nDownload maps from csgo web server\n\n\nwget -r --no-parent --reject \"index.html*\"  http://fastdl.streamline-servers.com/fastdl/ThomasL/5623//maps/ |grep surf \n\n\n\n\nMount Windows Partition that is in hibernation mode\n\n\nsudo ntfsfix /dev/sda3 \nsudo mount /dev/sda3 /mnt \n\n\n\n\nListing User Logins, reboot times and bad login attempts\n\n\nGet the running processes of logged-in users\n\n\nw\n\n\n\n\nDisplay Logged in users\n\n\nusers \n\nwho | cut -d' ' -f1 | sort | uniq\n\n\n\n\nGet all users login and logout history\n\n\nlast \n\n\n\n\nGet the users login history\n\n\nlast [user] \n\n\n\n\nDisplay bad login attempts\n\n\nlast b \n\n\n\n\nDisplay last reboot times\n\n\nlast reboot | less \n\n\n\n\nCommonnly used\n\n\nRun a command every x seconds\n\n\nwatch -n10 command args \n\n\n\n\nDirectory size disincluding sub directory info\n\n\ndu -hs /path/to/directory \n\n\n\n\nFind packages\n\n\napt-cache search \n\n\n\n\nSend mail\n\n\necho \"test message\" | mailx -s 'test subject' john@domain.com  \n\n\n\n\nNumber of files in dir\n\n\nls | wc -l \n\n\n\n\nRedirecting the standard error (stderr) and stdout to file\n\n\ncommand > file 2>&1  \n\n\n\n\nGet External/Public IP address:\n\n\ncurl ifconfig.me\n\n\n\n\nFind installed packages(Ubuntu)\n\n\ndpkg -l | grep php \n\n\n\n\nUpdate a single package using the CLI (Ubuntu)\n\n\nsudo apt-get --only-upgrade install <packagename> \n\n\n\n\nCompare files and directories content\n\n\ndiff file1 file2\ndiff /root/dir1/ /root/dir2/\n\n\n\n\nCompare file content with visual output\n\n\nsdiff file1 file2\n\n\n\n\nNetwork manager\n\n\nView IP settings\n\n\nsudo service network-manager start \n\n\n\n\nUbuntu 14.04\n\n\nnmcli dev list iface eth0 \n\n\n\n\nFor newer versions, you can use this:\n\n\nnmcli dev show eth0 \n\n\n\n\nUFW\n\n\nFind port and protocal\n\n\nufw status numbered |(grep '80/tcp'|awk -F\"[][]\" '{print $2}')\n\n\n\n\nDelete port\n\n\nufw delete $(ufw status numbered |(grep '80/tcp'|awk -F\"[][]\" '{print $2}'))\n\n\n\n\nDelete firewall rules on cli and auto select yes\n\n\nyes | for i in {50..3}; do sudo ufw delete $i; done\n\n\n\n\nImageMagick - Command Line Image Manipulation\n\n\nInstallation\n\n\nsudo apt-get install imagemagick \nsudo yum -y install ImageMagick \n\n\n\n\nConverting Between Formats\n\n\nconvert howtogeek.png howtogeek.jpg \n\n\n\n\nResize Images\n\n\nconvert example.png -resize 200\u00d7100 example.png\n\n\n\n\nResize Images & Preserve aspect ratio\n\n\nconvert example.png -resize 200\u00d7100! example.png \n\n\n\n\nRotate Image\n\n\nconvert howtogeek.jpg -rotate 90 howtogeek-rotated.jpg \n\n\n\n\nConverting Between Formats & Changing quality\n\n\nconvert howtogeek.png -quality 95 howtogeek.jpg \n\n\n\n\nThe Last example shows you that you can combined operations.\n\n\nTMUX & screen\n\n\nStart new with session name\n\n\ntmux new -s myname\n\n\n\n\nAttach\n\n\ntmux a tmuxname\n\n\n\n\nAttach to named\n\n\ntmux a -t myname\n\n\n\n\nList sessions\n\n\ntmux ls\n\n\n\n\nKill session\n\n\ntmux kill-session -t myname\n\n\n\n\nInject a command to a detached screen\n\n\nscreen -p 0 -X stuff $'bot_kill\\n'\n\n\n\n\nCurl\n\n\nGet Response code\n\n\ncurl -sI https://$SITE | head -1\n\n\n\n\nDig\n\n\nReverse DNS lookup\n \n\n\ndig +noall +answer -x 199.232.99.199\n\n\n\n\n-x\nReverse DNS lookup \n\n\n+noall\n and \n+answer\n makes output pretty",
            "title": "Linux commands"
        },
        {
            "location": "/linux-commands/#find",
            "text": "Find all matching files and replace with new file  find ~/ -type f -iname \"gameme.smx\" | while read line\ndo\n  cp -v gameme.smx $line\ndone  Find and remove permissions  find . -type f -iname \"*.ini\" -exec chmod -x {} \\;  Find files and grep  find ~/ -type f -name \"autoexec.cfg\" -exec cat {} | grep 'log_address' \\;  Find and replace text in multiple files  sed -i 's/\"findtext\"/\"replacetext\"/g' *  Find text and replace the entire line  sed -i 's/\"^findtext.*\"/\"replacetext\"/g' *  Delete a specific subfolder within all directories  echo ~/john/*/csgo/csgo/ | xargs -n 1 rm -r   Copy a specific sub directory from all directories.  echo ~/john/*/ | xargs -n 1 cp -R csgo/  The -i option of cp command means that you will be asked whether to overwrite a file  Find empty files and delete  find /tmp -type f -empty -delete  Find and replace string  find . -type f -name \"gamemode_comp*\" -exec sed -i 's/123/dfg/g' {} +",
            "title": "Find"
        },
        {
            "location": "/linux-commands/#listening-on-ports-traffic-network-connections",
            "text": "Find port of runnin application  netstat -lnp | grep ts3\nnetstat -l -a -p -n    Find appliction listening on a port  sudo lsof -i :80  Monitor live Network connections and traffic  sudo tcptrack -i eth0 -r 5",
            "title": "Listening on Ports, Traffic Network connections"
        },
        {
            "location": "/linux-commands/#hardware-info",
            "text": "All hardware info  sudo lshw | less  Motherbaord  sudo lshw -c system  Network  sudo lshw -C network  CPU  sudo lscpu   PCI (GPU info here as well)  sudo lspci   Memory  free -h",
            "title": "Hardware info"
        },
        {
            "location": "/linux-commands/#clonedownload-a-website",
            "text": "wget --limit-rate=200k --no-clobber --convert-links --random-wait -r -p -E -e robots=off -U mozilla http://www.kossboss.com",
            "title": "Clone/Download a website"
        },
        {
            "location": "/linux-commands/#backup-all-changed-config-files",
            "text": "debsums -ce | tar --files-from=- -cf configs.tar",
            "title": "Backup all changed config files"
        },
        {
            "location": "/linux-commands/#download-maps-from-csgo-web-server",
            "text": "wget -r --no-parent --reject \"index.html*\"  http://fastdl.streamline-servers.com/fastdl/ThomasL/5623//maps/ |grep surf",
            "title": "Download maps from csgo web server"
        },
        {
            "location": "/linux-commands/#mount-windows-partition-that-is-in-hibernation-mode",
            "text": "sudo ntfsfix /dev/sda3 \nsudo mount /dev/sda3 /mnt",
            "title": "Mount Windows Partition that is in hibernation mode"
        },
        {
            "location": "/linux-commands/#listing-user-logins-reboot-times-and-bad-login-attempts",
            "text": "Get the running processes of logged-in users  w  Display Logged in users  users \n\nwho | cut -d' ' -f1 | sort | uniq  Get all users login and logout history  last   Get the users login history  last [user]   Display bad login attempts  last b   Display last reboot times  last reboot | less",
            "title": "Listing User Logins, reboot times and bad login attempts"
        },
        {
            "location": "/linux-commands/#commonnly-used",
            "text": "Run a command every x seconds  watch -n10 command args   Directory size disincluding sub directory info  du -hs /path/to/directory   Find packages  apt-cache search   Send mail  echo \"test message\" | mailx -s 'test subject' john@domain.com    Number of files in dir  ls | wc -l   Redirecting the standard error (stderr) and stdout to file  command > file 2>&1    Get External/Public IP address:  curl ifconfig.me  Find installed packages(Ubuntu)  dpkg -l | grep php   Update a single package using the CLI (Ubuntu)  sudo apt-get --only-upgrade install <packagename>",
            "title": "Commonnly used"
        },
        {
            "location": "/linux-commands/#compare-files-and-directories-content",
            "text": "diff file1 file2\ndiff /root/dir1/ /root/dir2/  Compare file content with visual output  sdiff file1 file2",
            "title": "Compare files and directories content"
        },
        {
            "location": "/linux-commands/#network-manager",
            "text": "View IP settings  sudo service network-manager start   Ubuntu 14.04  nmcli dev list iface eth0   For newer versions, you can use this:  nmcli dev show eth0",
            "title": "Network manager"
        },
        {
            "location": "/linux-commands/#ufw",
            "text": "Find port and protocal  ufw status numbered |(grep '80/tcp'|awk -F\"[][]\" '{print $2}')  Delete port  ufw delete $(ufw status numbered |(grep '80/tcp'|awk -F\"[][]\" '{print $2}'))  Delete firewall rules on cli and auto select yes  yes | for i in {50..3}; do sudo ufw delete $i; done",
            "title": "UFW"
        },
        {
            "location": "/linux-commands/#imagemagick-command-line-image-manipulation",
            "text": "Installation  sudo apt-get install imagemagick \nsudo yum -y install ImageMagick   Converting Between Formats  convert howtogeek.png howtogeek.jpg   Resize Images  convert example.png -resize 200\u00d7100 example.png  Resize Images & Preserve aspect ratio  convert example.png -resize 200\u00d7100! example.png   Rotate Image  convert howtogeek.jpg -rotate 90 howtogeek-rotated.jpg   Converting Between Formats & Changing quality  convert howtogeek.png -quality 95 howtogeek.jpg   The Last example shows you that you can combined operations.",
            "title": "ImageMagick - Command Line Image Manipulation"
        },
        {
            "location": "/linux-commands/#tmux-screen",
            "text": "Start new with session name  tmux new -s myname  Attach  tmux a tmuxname  Attach to named  tmux a -t myname  List sessions  tmux ls  Kill session  tmux kill-session -t myname  Inject a command to a detached screen  screen -p 0 -X stuff $'bot_kill\\n'",
            "title": "TMUX &amp; screen"
        },
        {
            "location": "/linux-commands/#curl",
            "text": "Get Response code  curl -sI https://$SITE | head -1",
            "title": "Curl"
        },
        {
            "location": "/linux-commands/#dig",
            "text": "Reverse DNS lookup    dig +noall +answer -x 199.232.99.199  -x Reverse DNS lookup   +noall  and  +answer  makes output pretty",
            "title": "Dig"
        },
        {
            "location": "/linuxtools-commands/",
            "text": "Sensu\n\n\nClear dashboard\n\n\nsensu-cli event list --format json | jq --raw-output \"map(select( .[\\\"check\\\"][\\\"issued\\\"]  )) | .[] | .client.name + \\\" \\\" +  .check.name \" | xargs --verbose --no-run-if-empty -n2 sensu-cli resolve \n\n\n\n\nAnsible\n\n\nRun playbook\n\n\nansible-playbook -i inventory/foo/hosts -l webservers -u ubuntu -S install_sensu.yml \n\n\n\n\n-i\n = inventory file, \n-l\n = server group, \n-u\n = ssh user, \n-S\n = playbook\n\n\nSend ping to all servers within host file\n\n\nansible all -m ping -i hosts \n\n\n\n\nElasticSearch\n\n\nDelete logs\n\n\n20 0 * * * /usr/local/bin/curator --host 127.0.0.1 delete indices --older-than 30 --time-unit days --timestring '%Y.%m.%d'\n\n\n\n\nGet indices and shard info\n\n\ncurl -XGET \"http://localhost:9200/_cat/shards?v\"\ncurl -XGET \"http://localhost:9200/_cat/indices\"\n\n\n\n\nGet indexes\n\n\ncurl -XGET 'http://localhost:9200/filebeat*/_aliases?pretty'\n\n\n\n\nGet Index Sizes\n\n\ncurl localhost:9200/index1,index2/_stats\ncurl localhost:9200/filebeat-2016.07.13/_stats\n\n\n\n\nDelete Indexes\n\n\ncurl -XDELETE 'http://localhost:9200/twitter/'\n\n\n\n\nNode Stats\n\n\ncurl -XGET \"http://localhost:9200/_nodes/stats?v\" | jq .\n\n\n\n\nCluster info\n\n\ncurl -XGET 'http://localhost:9200/_cluster/health?pretty'\ncurl -XGET 'http://localhost:9200/_cluster/state'\n\n\n\n\nNode Info\n\n\ncurl -XGET 'http://localhost:9200/_nodes'\ncurl -XGET 'http://localhost:9200/_nodes/stats'\n\n\n\n\nFilebeat-2016.07.13 (jq displays in json format)\n\n\ncurl localhost:9200/filebeat-2016.07.13,filebeat-2016.07.12/_stats | jq .\n\n\n\n\nRedis\n\n\nConnect to redis host\n\n\nredis-cli -h 192.168.1.1\n\n\n\n\nCommands\n\n\ninfo\n      \u2013 Displays ALL info, (Starting point) \n\n\ninfo stats\n      \u2013 Displays select info  \n\n\nconfig get maxmemory-policy\n \n\n\nconfig set maxmemory-policy volatile-lru\n\n\nconfig get maxmemory\n\n\nconfig set maxmemory 20000000000\n\n\nconfig get \\*\n      \u2013 Displays all configurable variables \n\nslowlog get 25\n      \u2013 Displays the top 25 slow queries\n\n\nresetstat\n      \u2013  Resets stats (Not all)\n\n\nhelp config resetstat\n      \u2013 Explains Command \n\n\nWatch Command\n\n\nwatch redis-cli -h 192.168.1.1 info stats\n\n\n\n\nEviction policies\n   \n\n\nThe exact behavior Redis follows when the maxmemory limit is reached is configured using the maxmemory-policyconfiguration directive.\n\n\nThe following policies are available: \n\n\nnoeviction\n: return errors when the memory limit was reached and the client is trying to execute commands that could result in more memory to be used (most write commands, but DEL and a few more exceptions).  \n\n\nallkeys-lru\n: evict keys trying to remove the less recently used (LRU) keys first, in order to make space for the new data added.  \n\n\nvolatile-lru\n: evict keys trying to remove the less recently used (LRU) keys first, but only among keys that have anexpire set, in order to make space for the new data added.\n\n\nallkeys-random\n: evict random keys in order to make space for the new data added.\n\n\nvolatile-random\n: evict random keys in order to make space for the new data added, but only evict keys with anexpire set.\n\n\nvolatile-ttl\n: In order to make space for the new data, evict only keys with an expire set, and try to evict keys with a shorter time to live (TTL) first.",
            "title": "Linux tools commands"
        },
        {
            "location": "/linuxtools-commands/#sensu",
            "text": "Clear dashboard  sensu-cli event list --format json | jq --raw-output \"map(select( .[\\\"check\\\"][\\\"issued\\\"]  )) | .[] | .client.name + \\\" \\\" +  .check.name \" | xargs --verbose --no-run-if-empty -n2 sensu-cli resolve",
            "title": "Sensu"
        },
        {
            "location": "/linuxtools-commands/#ansible",
            "text": "Run playbook  ansible-playbook -i inventory/foo/hosts -l webservers -u ubuntu -S install_sensu.yml   -i  = inventory file,  -l  = server group,  -u  = ssh user,  -S  = playbook  Send ping to all servers within host file  ansible all -m ping -i hosts",
            "title": "Ansible"
        },
        {
            "location": "/linuxtools-commands/#elasticsearch",
            "text": "Delete logs  20 0 * * * /usr/local/bin/curator --host 127.0.0.1 delete indices --older-than 30 --time-unit days --timestring '%Y.%m.%d'  Get indices and shard info  curl -XGET \"http://localhost:9200/_cat/shards?v\"\ncurl -XGET \"http://localhost:9200/_cat/indices\"  Get indexes  curl -XGET 'http://localhost:9200/filebeat*/_aliases?pretty'  Get Index Sizes  curl localhost:9200/index1,index2/_stats\ncurl localhost:9200/filebeat-2016.07.13/_stats  Delete Indexes  curl -XDELETE 'http://localhost:9200/twitter/'  Node Stats  curl -XGET \"http://localhost:9200/_nodes/stats?v\" | jq .  Cluster info  curl -XGET 'http://localhost:9200/_cluster/health?pretty'\ncurl -XGET 'http://localhost:9200/_cluster/state'  Node Info  curl -XGET 'http://localhost:9200/_nodes'\ncurl -XGET 'http://localhost:9200/_nodes/stats'  Filebeat-2016.07.13 (jq displays in json format)  curl localhost:9200/filebeat-2016.07.13,filebeat-2016.07.12/_stats | jq .",
            "title": "ElasticSearch"
        },
        {
            "location": "/linuxtools-commands/#redis",
            "text": "Connect to redis host  redis-cli -h 192.168.1.1  Commands  info       \u2013 Displays ALL info, (Starting point)   info stats       \u2013 Displays select info    config get maxmemory-policy    config set maxmemory-policy volatile-lru  config get maxmemory  config set maxmemory 20000000000  config get \\*       \u2013 Displays all configurable variables  slowlog get 25       \u2013 Displays the top 25 slow queries  resetstat       \u2013  Resets stats (Not all)  help config resetstat       \u2013 Explains Command   Watch Command  watch redis-cli -h 192.168.1.1 info stats  Eviction policies      The exact behavior Redis follows when the maxmemory limit is reached is configured using the maxmemory-policyconfiguration directive.  The following policies are available:   noeviction : return errors when the memory limit was reached and the client is trying to execute commands that could result in more memory to be used (most write commands, but DEL and a few more exceptions).    allkeys-lru : evict keys trying to remove the less recently used (LRU) keys first, in order to make space for the new data added.    volatile-lru : evict keys trying to remove the less recently used (LRU) keys first, but only among keys that have anexpire set, in order to make space for the new data added.  allkeys-random : evict random keys in order to make space for the new data added.  volatile-random : evict random keys in order to make space for the new data added, but only evict keys with anexpire set.  volatile-ttl : In order to make space for the new data, evict only keys with an expire set, and try to evict keys with a shorter time to live (TTL) first.",
            "title": "Redis"
        },
        {
            "location": "/text/",
            "text": "AWK\n\n\nRemoving quotes\n\n\nawk '{ print \"\\\"\"$0\"\\\"\"}' inputfile\n\n\n\n\nIf your file has empty lines, awk is definitely the way to go\n\n\nawk 'NF { print \"\\\"\"$0\"\\\"\"}' inputfile.txt > newfile.txt\n\n\n\n\nNF\n tells awk to only execute the print command when the Number of Fields is more than zero (line is not empty).\n\n\nPrint 3rd field\n\n\nawk '{print $3}' maps.txt \n\n\n\n\nSort strings by length\n\n\nawk '{ print length($0),$0 | \"sort -n\"}'  usragnt.txt\n\n\n\n\nExamples\n  \n\n\nAWK's \nprintf\n, \nNR\n and \n$0\n make it easy to have precise and flexible control over the formatting\n\n\nawk '{printf(\"%010d %s\\n\", NR, $0)}' maplist.txt\n\n\n\n\nOutput:  \n\n\n0000000001 surf_map1\n \n\n\n0000000002 surf_map2\n\n\n0000000003 surf_map3\n  \n\n\nawk '{printf(\"%d %s \\n\", NR, $0)}' mapcycle_surf1.txt \n\n\n\n\nOutput:\n\n\n1 \"surf_004_final1\"\n \n\n\n2 \"surf_1day\"\n \n\n\n3 \"surf_2012_beta12\"\n \n\n\nawk '{printf(\"%s %d \\n\" ,$0 , NR)}' mapcycle_surf1.txt \n\n\n\n\nOutput: \n\n\n\"surf_004_final1\" 1\n \n\n\n\"surf_1day\" 2\n \n\n\n\"surf_2012_beta12\" 3\n \n\n\nawk '{printf(\"%s \\\"%d\\\" \\n\" ,$0 , NR)}' mapcycle_surf1.txt \n\n\n\n\nOutput:  \n\n\n\"surf_004_final1\" \"1\"\n \n\n\n\"surf_1day\" \"2\"\n\n\n\"surf_2012_beta12\" \"3\"\n\n\nawk '{printf(\"%s \\\"%d\\\" \\n\" ,$0 , NR-1)}' mapcycle_surf1.txt > mapcycle_surf.txt \n\n\n\n\nOutput:  \n\n\n\"surf_004_final1\" \"0\"\n \n\n\n\"surf_1day\" \"1\"\n \n\n\n\"surf_2012_beta12\" \"2\"\n\n\n\"surf_3\" \"3\"\n  \n\n\nSED & REGEX\n\n\nFind and replace using REGEX\n  \n\nString to replace \nsurf_prime_time_r3vamp /\n\n\nsed -i -E \"s,surf_[A-Za-z0-9]+_?-?[A-Za-z0-9]+_?[A-Za-z0-9]+\\s/, 123,\" workmaps.txt \n\n\n\n\n-i\n input file \n\n\n-E\n Regex\n\n\nRemove empty lines\n\n\nsed -i -E \"s,^\\s*$,,\" workmaps.txt \n\n\n\n\nRemove the first character sed\n\n\ncat input_file | sed 's/^..//' > output_file\n\n\n\n\nSearch and replace text in multiple files and escape special characters\n\n\nsed -i 's/test.data\\*\\.keyboard/test\\.\\*\\.keyboard/g' *\n\n\n\n\nBefore: \ntest.data*.keyboard\n\nAfter: \ntest.*.keyboard\n\n\nEscape Characters\n\n\nsed -i 's/\\(foo\\)/bin/g' file.json\n\n\n\n\nReplace string but keep indention or spaces\n\n\nsed -i  '/\"interval\":/i \\ \\ \\ \\ \\ \\ \"occurrences\": 2,' file.json\n\n\n\n\nAppend line after match\n\n\nsed  '/\\[option\\]/a Hello World' input\n\n\n\n\nInsert line before match\n\n\nsed  '/\\[option\\]/i Hello World' input\n\n\n\n\nSearch and replace string\n\n\nfind . -type f -name \"gamemode_comp*\" -exec sed -i 's/YB53XUH3/\"J123f34J123454!^dfg\"/g' {} + \n\n\n\n\nBefore: \n[ ] surf_zion.nav.bz2 2015-06-21 18:27 132\n\nAfter: \nsurf_whoknows.nav.bz2\n\n\nCUT\n\n\nDisplayfirst field after delimenator\n\n\ncut -d':' -f1 /etc/passwd\n\n\n\n\nPrints the usernames from \n/etc/passwd\n\n\nTAIL\n\n\nDelete first 4 lines and last 4 lines from a text file\n\n\ntail -n +5 srv_ssh.json | head -n -4 > test.json.new && mv test.json.new srv_ssh.json\n\n\n\n\nSort\n\n\nRemove duplicate lines\n\n\nsort file.log | uniq > newfile.log\n\n\n\n\nGREP\n\n\nDisplay files that do not have string:\n\n\ngrep -L \"foo\" *\n\n\n\n\nDisplay files that do have string\n\n\ngrep -n \"foo\" *\n\n\n\n\nDisplays unique values from compared files\n\n\ngrep -v -f <compare-file-1> <compare-file-2>",
            "title": "Text (awk sed grep etc )"
        },
        {
            "location": "/text/#awk",
            "text": "Removing quotes  awk '{ print \"\\\"\"$0\"\\\"\"}' inputfile  If your file has empty lines, awk is definitely the way to go  awk 'NF { print \"\\\"\"$0\"\\\"\"}' inputfile.txt > newfile.txt  NF  tells awk to only execute the print command when the Number of Fields is more than zero (line is not empty).  Print 3rd field  awk '{print $3}' maps.txt   Sort strings by length  awk '{ print length($0),$0 | \"sort -n\"}'  usragnt.txt  Examples     AWK's  printf ,  NR  and  $0  make it easy to have precise and flexible control over the formatting  awk '{printf(\"%010d %s\\n\", NR, $0)}' maplist.txt  Output:    0000000001 surf_map1    0000000002 surf_map2  0000000003 surf_map3     awk '{printf(\"%d %s \\n\", NR, $0)}' mapcycle_surf1.txt   Output:  1 \"surf_004_final1\"    2 \"surf_1day\"    3 \"surf_2012_beta12\"    awk '{printf(\"%s %d \\n\" ,$0 , NR)}' mapcycle_surf1.txt   Output:   \"surf_004_final1\" 1    \"surf_1day\" 2    \"surf_2012_beta12\" 3    awk '{printf(\"%s \\\"%d\\\" \\n\" ,$0 , NR)}' mapcycle_surf1.txt   Output:    \"surf_004_final1\" \"1\"    \"surf_1day\" \"2\"  \"surf_2012_beta12\" \"3\"  awk '{printf(\"%s \\\"%d\\\" \\n\" ,$0 , NR-1)}' mapcycle_surf1.txt > mapcycle_surf.txt   Output:    \"surf_004_final1\" \"0\"    \"surf_1day\" \"1\"    \"surf_2012_beta12\" \"2\"  \"surf_3\" \"3\"",
            "title": "AWK"
        },
        {
            "location": "/text/#sed-regex",
            "text": "Find and replace using REGEX    \nString to replace  surf_prime_time_r3vamp /  sed -i -E \"s,surf_[A-Za-z0-9]+_?-?[A-Za-z0-9]+_?[A-Za-z0-9]+\\s/, 123,\" workmaps.txt   -i  input file   -E  Regex  Remove empty lines  sed -i -E \"s,^\\s*$,,\" workmaps.txt   Remove the first character sed  cat input_file | sed 's/^..//' > output_file  Search and replace text in multiple files and escape special characters  sed -i 's/test.data\\*\\.keyboard/test\\.\\*\\.keyboard/g' *  Before:  test.data*.keyboard \nAfter:  test.*.keyboard  Escape Characters  sed -i 's/\\(foo\\)/bin/g' file.json  Replace string but keep indention or spaces  sed -i  '/\"interval\":/i \\ \\ \\ \\ \\ \\ \"occurrences\": 2,' file.json  Append line after match  sed  '/\\[option\\]/a Hello World' input  Insert line before match  sed  '/\\[option\\]/i Hello World' input  Search and replace string  find . -type f -name \"gamemode_comp*\" -exec sed -i 's/YB53XUH3/\"J123f34J123454!^dfg\"/g' {} +   Before:  [ ] surf_zion.nav.bz2 2015-06-21 18:27 132 \nAfter:  surf_whoknows.nav.bz2",
            "title": "SED &amp; REGEX"
        },
        {
            "location": "/text/#cut",
            "text": "Displayfirst field after delimenator  cut -d':' -f1 /etc/passwd  Prints the usernames from  /etc/passwd",
            "title": "CUT"
        },
        {
            "location": "/text/#tail",
            "text": "Delete first 4 lines and last 4 lines from a text file  tail -n +5 srv_ssh.json | head -n -4 > test.json.new && mv test.json.new srv_ssh.json",
            "title": "TAIL"
        },
        {
            "location": "/text/#sort",
            "text": "Remove duplicate lines  sort file.log | uniq > newfile.log",
            "title": "Sort"
        },
        {
            "location": "/text/#grep",
            "text": "Display files that do not have string:  grep -L \"foo\" *  Display files that do have string  grep -n \"foo\" *  Displays unique values from compared files  grep -v -f <compare-file-1> <compare-file-2>",
            "title": "GREP"
        },
        {
            "location": "/mysql/",
            "text": "Create a New User And Grant Privileges\n\n\nLocal Access\n\n\nCREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';  \n\n\n\n\nExternal Access\n\n\nCREATE USER 'newuser'@'%' IDENTIFIED BY 'password';  \n\n\n\n\nGrant all privileges on all Databases and tables\n\n\nGRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost' IDENTIFIED BY 'password';  \n\n\n\n\nGrant all privileges one a specific databases(wikimedia) and all tables with external access\n\n\nGRANT ALL PRIVILEGES ON wikimedia . * TO 'newuser'@'%' IDENTIFIED BY 'password'; \n\nFLUSH PRIVILEGES;\n\n\n\n\nCommands\n\n\nView All users\n  \n\n\nSELECT USER,Host FROM mysql.user\\G; \n\n\n\n\n\\G\n for neat output  \n\n\nDelete MySQL user\n\n\nDELETE FROM mysql.user WHERE USER = 'john'; \n\n\n\n\nDelete MySQL user with specific host\n\n\nDELETE FROM mysql.user WHERE USER = 'john' AND Host = '%';\n\n\n\n\nMySQL Dump\n\n\nDump with correct DB encoding to be safe, see in section further down\n\n\nmysqldump -h localhost -u root -pP@ssw0rd db01 > db01.sql; \n\n\n\n\nMySQL Restore\n\n\nmysql -h localhost -u root -pP@ssw0rd db01 < db01.sql; \n\n\n\n\nInsert values to table\n\n\nINSERT INTO table01 (a, b, c) VALUES ('1','2','3');\n\n\n\n\nUpdate values in a field\n\n\nUPDATE table01 SET col1 = 'a', col2 = 'b', col3 = 'c' WHERE FIELD = '1';\n\n\n\n\nExample:\n\n\nUPDATE table01 SET token = '12312312asd' WHERE service_id = '100'\";\n\n\n\n\nDelete row from table\n\n\nDELETE FROM orders WHERE id_users = 1 AND id_product = 2 LIMIT 1;\nDELETE FROM table01 WHERE col1 LIKE 'abc'\";\n\n\n\n\nImport tables to another database, keeps the same structure and primary keys\n\n\nINSERT IGNORE INTO db1.table1 SELECT * FROM db2.table1;\n\n\n\n\nChange root password with mysqladmin command\n\n\nmysqladmin -u root -p'oldpassword' password newpass \n\n\n\n\nStatus, process list, open connections\n\n\nOpen connections\n\n\nmysql> SHOW STATUS LIKE 'Conn%';\n\n\n\n\n+---------------+-------+\n| Variable_name | VALUE |\n+---------------+-------+\n| Connections   | 8     | \n+---------------+-------+\n\n\n\n\nProcess list\n\n\nmysql> SHOW processlist;\n\n\n\n\n+----+------+-----------------+--------+---------+------+-------+------------------+\n| Id | USER | Host            | db     | Command | TIME | State | Info             |\n+----+------+-----------------+--------+---------+------+-------+------------------+\n|  3 | root | localhost       | webapp | Query   |    0 | NULL  | SHOW processlist | \n|  5 | root | localhost:61704 | webapp | Sleep   |  208 |       | NULL             | \n|  6 | root | localhost:61705 | webapp | Sleep   |  208 |       | NULL             | \n|  7 | root | localhost:61706 | webapp | Sleep   |  208 |       | NULL             | \n+----+------+-----------------+--------+---------+------+-------+------------------+\n\n\n\n\nStatus\n\n\n mysqladmin STATUS\n\n\n\n\nUptime: 4661  Threads: 1  Questions: 200  Slow queries: 0  Opens: 16  FLUSH\nTABLES: 1  OPEN TABLES: 6  Queries per SECOND avg: 0.043 \n\n\n\n\nAllow remote access to MySQL\n\n\nvim /etc/mysql/my.cnf \n\nbind-address=YOUR-SERVER-IP \n\n\n\n\nDumping and importing UTF-8 the safe way\n\n\nSQL Dump\n\n\nmysqldump -uroot -p DATABASE -r utf8.dump \n\n\n\n\nImporting and setting UTF8\n\n\nmysql -uroot -p --default-character-set=utf8 database \nSET names='utf8'; \nSOURCE utf8.dump; \n\n\n\n\nResetting root password\n\n\nStop MySQL\n\n\nsudo service mysql stop \n\n\n\n\nStart MySQL in safe mode\n\n\nsudo mysqld_safe --skip-grant-tables & \n\n\n\n\nLogin as root\n\n\nmysql -uroot \n\n\n\n\nInstruct MySQL which database to use\n\n\nUSE mysql; \n\n\n\n\nReset Password\n\n\nUPDATE USER SET password=PASSWORD(\"mynewpassword\") WHERE USER='root';\n\n\n\n\nFlush privileges\n\n\nFLUSH privileges;\n\n\n\n\nStart MySQL\n\n\nsudo service mysql start \n\n\n\n\nCheck Set Variables\n\n\nmysqladmin -u USER -ph@ckm3  VARIABLES | grep max_connections \n\n\n\n\nDisplay default mysql config files and execute order\n\n\nmysql --help | grep Default -A 1 \n\n\n\n\nMigrate MySQL users, permissions and database\n\n\nMigrate MySQL Settings\n\n\nMYSQL Engines\n\n\nInnoDB is almost always the best option, since it has good concurrency support.\n\n\nMyISAM may be faster in single-user or read-only installations. MyISAM databases tend to get corrupted more often than InnoDB databases.\n\n\nMYSQL Character Encoding\n\n\nIn binary mode, is more efficient than MySQL's UTF-8 mode, and allows you to use the full range of Unicode characters.\n\n\nIn UTF-8 mode, MySQL will know what character set your data is in, and can present and convert it appropriately, but it will not let you store characters above the Basic Multilingual Plane. | utf-8 | | 26 | \n\n\nCreate tables\n\n\n     CREATE TABLE tutorials_tbl(\n       tutorial_id INT NOT NULL AUTO_INCREMENT,\n       tutorial_title VARCHAR(100) NOT NULL,\n       tutorial_author VARCHAR(40) NOT NULL,\n       submission_date DATE,\n       PRIMARY KEY ( tutorial_id )\n    );\n\n\n\n\nField Attribute NOT NULL is being used because we do not want this field to be NULL. So if user will try to create a record with NULL value, then MySQL will raise an error.\n\n\nField Attribute AUTO_INCREMENT tells MySQL to go ahead and add the next available number to the id field.\n\n\nKeyword PRIMARY KEY is used to define a column as primary key. You can use multiple columns separated by comma to define a primary key.",
            "title": "MySQL"
        },
        {
            "location": "/mysql/#create-a-new-user-and-grant-privileges",
            "text": "Local Access  CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';    External Access  CREATE USER 'newuser'@'%' IDENTIFIED BY 'password';    Grant all privileges on all Databases and tables  GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost' IDENTIFIED BY 'password';    Grant all privileges one a specific databases(wikimedia) and all tables with external access  GRANT ALL PRIVILEGES ON wikimedia . * TO 'newuser'@'%' IDENTIFIED BY 'password'; \n\nFLUSH PRIVILEGES;",
            "title": "Create a New User And Grant Privileges"
        },
        {
            "location": "/mysql/#commands",
            "text": "View All users     SELECT USER,Host FROM mysql.user\\G;   \\G  for neat output    Delete MySQL user  DELETE FROM mysql.user WHERE USER = 'john';   Delete MySQL user with specific host  DELETE FROM mysql.user WHERE USER = 'john' AND Host = '%';  MySQL Dump  Dump with correct DB encoding to be safe, see in section further down  mysqldump -h localhost -u root -pP@ssw0rd db01 > db01.sql;   MySQL Restore  mysql -h localhost -u root -pP@ssw0rd db01 < db01.sql;   Insert values to table  INSERT INTO table01 (a, b, c) VALUES ('1','2','3');  Update values in a field  UPDATE table01 SET col1 = 'a', col2 = 'b', col3 = 'c' WHERE FIELD = '1';  Example:  UPDATE table01 SET token = '12312312asd' WHERE service_id = '100'\";  Delete row from table  DELETE FROM orders WHERE id_users = 1 AND id_product = 2 LIMIT 1;\nDELETE FROM table01 WHERE col1 LIKE 'abc'\";  Import tables to another database, keeps the same structure and primary keys  INSERT IGNORE INTO db1.table1 SELECT * FROM db2.table1;  Change root password with mysqladmin command  mysqladmin -u root -p'oldpassword' password newpass",
            "title": "Commands"
        },
        {
            "location": "/mysql/#status-process-list-open-connections",
            "text": "Open connections  mysql> SHOW STATUS LIKE 'Conn%';  +---------------+-------+\n| Variable_name | VALUE |\n+---------------+-------+\n| Connections   | 8     | \n+---------------+-------+  Process list  mysql> SHOW processlist;  +----+------+-----------------+--------+---------+------+-------+------------------+\n| Id | USER | Host            | db     | Command | TIME | State | Info             |\n+----+------+-----------------+--------+---------+------+-------+------------------+\n|  3 | root | localhost       | webapp | Query   |    0 | NULL  | SHOW processlist | \n|  5 | root | localhost:61704 | webapp | Sleep   |  208 |       | NULL             | \n|  6 | root | localhost:61705 | webapp | Sleep   |  208 |       | NULL             | \n|  7 | root | localhost:61706 | webapp | Sleep   |  208 |       | NULL             | \n+----+------+-----------------+--------+---------+------+-------+------------------+  Status   mysqladmin STATUS  Uptime: 4661  Threads: 1  Questions: 200  Slow queries: 0  Opens: 16  FLUSH\nTABLES: 1  OPEN TABLES: 6  Queries per SECOND avg: 0.043",
            "title": "Status, process list, open connections"
        },
        {
            "location": "/mysql/#allow-remote-access-to-mysql",
            "text": "vim /etc/mysql/my.cnf \n\nbind-address=YOUR-SERVER-IP",
            "title": "Allow remote access to MySQL"
        },
        {
            "location": "/mysql/#dumping-and-importing-utf-8-the-safe-way",
            "text": "SQL Dump  mysqldump -uroot -p DATABASE -r utf8.dump   Importing and setting UTF8  mysql -uroot -p --default-character-set=utf8 database \nSET names='utf8'; \nSOURCE utf8.dump;",
            "title": "Dumping and importing UTF-8 the safe way"
        },
        {
            "location": "/mysql/#resetting-root-password",
            "text": "Stop MySQL  sudo service mysql stop   Start MySQL in safe mode  sudo mysqld_safe --skip-grant-tables &   Login as root  mysql -uroot   Instruct MySQL which database to use  USE mysql;   Reset Password  UPDATE USER SET password=PASSWORD(\"mynewpassword\") WHERE USER='root';  Flush privileges  FLUSH privileges;  Start MySQL  sudo service mysql start",
            "title": "Resetting root password"
        },
        {
            "location": "/mysql/#check-set-variables",
            "text": "mysqladmin -u USER -ph@ckm3  VARIABLES | grep max_connections",
            "title": "Check Set Variables"
        },
        {
            "location": "/mysql/#display-default-mysql-config-files-and-execute-order",
            "text": "mysql --help | grep Default -A 1",
            "title": "Display default mysql config files and execute order"
        },
        {
            "location": "/mysql/#migrate-mysql-users-permissions-and-database",
            "text": "Migrate MySQL Settings",
            "title": "Migrate MySQL users, permissions and database"
        },
        {
            "location": "/mysql/#mysql-engines",
            "text": "InnoDB is almost always the best option, since it has good concurrency support.  MyISAM may be faster in single-user or read-only installations. MyISAM databases tend to get corrupted more often than InnoDB databases.",
            "title": "MYSQL Engines"
        },
        {
            "location": "/mysql/#mysql-character-encoding",
            "text": "In binary mode, is more efficient than MySQL's UTF-8 mode, and allows you to use the full range of Unicode characters.  In UTF-8 mode, MySQL will know what character set your data is in, and can present and convert it appropriately, but it will not let you store characters above the Basic Multilingual Plane. | utf-8 | | 26 |",
            "title": "MYSQL Character Encoding"
        },
        {
            "location": "/mysql/#create-tables",
            "text": "CREATE TABLE tutorials_tbl(\n       tutorial_id INT NOT NULL AUTO_INCREMENT,\n       tutorial_title VARCHAR(100) NOT NULL,\n       tutorial_author VARCHAR(40) NOT NULL,\n       submission_date DATE,\n       PRIMARY KEY ( tutorial_id )\n    );  Field Attribute NOT NULL is being used because we do not want this field to be NULL. So if user will try to create a record with NULL value, then MySQL will raise an error.  Field Attribute AUTO_INCREMENT tells MySQL to go ahead and add the next available number to the id field.  Keyword PRIMARY KEY is used to define a column as primary key. You can use multiple columns separated by comma to define a primary key.",
            "title": "Create tables"
        },
        {
            "location": "/apache/",
            "text": "Create config file\n\n\nsudo vi /etc/apache2/sites-available/iandi.co.za.conf \n\n\n\n\nStandard Domain\n\n\n<VirtualHost *:80>\n\n  ServerName iandi.co.za \n  ServerAlias www.iandi.co.za\n\n  ServerAdmin IandI@OneLove.Jah\n  DocumentRoot /var/www/iandi.co.za\n\n  ErrorLog ${APACHE_LOG_DIR}/error.log\n  CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n</VirtualHost> \n\n\n\n\nSub Domain\n\n\n<VirtualHost *:80>\n  ServerName wiki.iandi.co.za\n  DocumentRoot /var/www/wiki.iandi.co.za\n</VirtualHost> \n\n\n\n\nSet Apache Password Protected Directories With .htaccess File\n\n\n1. Make sure Apache is configured to use .htaccess file\n\n\n<Directory /var/www/swag.iandi.co.za>\n  Options Indexes Includes FollowSymLinks MultiViews\n  AllowOverride AuthConfig\n  Order allow,deny\n  Allow from all\n</Directory>\n\n\n\n\n2. Create a password file with htpasswd\n\n\nCreate directory outside apache document root, so that only Apache can access password file. The password-file should be placed somewhere not accessible from the web. This is so that people cannot download the password file:\n\n\nmkdir -p /home/john/swag.iandi.co.za\n\n\n\n\nAdd new user\n\n\nhtpasswd -c /home/john/swag.iandi.co.za/apasswords username\n\n\n\n\nAllow apache user www-data to read our password file\n\n\nchown www-data:www-data /home/john/swag.iandi.co.za/apasswords\nchmod 0660 /home/john/swag.iandi.co.za/apasswords\n\n\n\n\nCreate .htaccess file\n\n\ncd /var/www/swag.iandi.co.za\nvi .htaccess\n\n\n\n\nAdd following text\n\n\nAuthType Basic\nAuthName \"Restricted Access\"\nAuthUserFile /home/john/swag.iandi.co.za/apasswords\nRequire user username\n\n\n\n\nEnable config file\n\n\nsudo a2ensite iandi.co.za.conf \n\n\n\n\nDisable OS Identity and Apache Version from Errors\n\n\n     sudo vi /etc/apache2/apache2.conf  \n\n\n\n\nAdd or Edit\n\n\n     ServerSignature Off \n     ServerTokens Prod  \n\n\n\n\nDisable Directory Listing\n\n\n     sudo vi /etc/apache2/sites-available/site.conf  \n\n\n\n\nor\n\n\n     sudo vi /etc/apache2/apache2.conf  \n\n\n\n\nAdd\n\n\n<Directory /var/www/html>\n    Options -Indexes\n</Directory> \n\n\n\n\nSecure Apache\n\n\nmod_security and mod_evasive modules\n\n\nWhere \nmod_security\n works as a firewall for our web applications and allows us to monitor traffic on a real time basis. It also helps us to protect our websites or web server from brute force attacks. You can simply install \nmod_security\n on your server with the help of your default package installers.\n\n\nWhere \nmod_evasive\n works very efficiently, it takes one request to process and processes it very well. It prevents DDOS attacks from doing as much damage. This feature of \nmod_evasive\n enables it to handle the HTTP brute force and Dos or DDos attack. This module detects attacks with three methods.\n\n\n\n\nIf so many requests come to a same page in a few times per second. \n\n\nIf any child process trying to make more than 50 concurrent requests. \n\n\nIf any IP still trying to make new requests when its temporarily blacklisted.\n\n\n\n\nInstall\n\n\nsudo apt-get install libapache2-mod-evasive libapache2-mod-security2 \n\n\n\n\nEnable Apache module\n\n\nsudo a2enmod mod_security && sudo a2enmod mode_evasion\n\n\n\n\nRestart Apache\n\n\nsudo service apache restart\n\n\n\n\nApache security tips\n\n\nEnable GZip Compression in Apache\n\n\nEnable mods\n\n\na2enmod deflate;a2enmod filter\n\n\n\n\nAdd to Apache config\n\n\n<Directory>\n  AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript image/svg+xml\n</Directory>\n\n\n\n\nEnable caching\n\n\nEnable mods\n\n\na2enmod expires; a2enmod headers\n\n\n\n\nAdd to Apache config\n\n\n<IfModule mod_expires.c>\n  ExpiresActive On\n  ExpiresDefault \"access plus 30 days\"\n  ExpiresByType text/html \"access plus 1 day\"\n  ExpiresByType image/gif \"access plus 30 days\"\n  ExpiresByType image/jpeg \"access plus 30 days\"\n  ExpiresByType image/png \"access plus 30 days\"\n  ExpiresByType text/css \"access plus 30 days\"\n  ExpiresByType text/javascript \"access plus 30 days\"\n  ExpiresByType application/x-javascript \"access plus 30 days\"\n  ExpiresByType text/xml \"access plus 30 days\"\n</IfModule>",
            "title": "Apache"
        },
        {
            "location": "/apache/#create-config-file",
            "text": "sudo vi /etc/apache2/sites-available/iandi.co.za.conf   Standard Domain  <VirtualHost *:80>\n\n  ServerName iandi.co.za \n  ServerAlias www.iandi.co.za\n\n  ServerAdmin IandI@OneLove.Jah\n  DocumentRoot /var/www/iandi.co.za\n\n  ErrorLog ${APACHE_LOG_DIR}/error.log\n  CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n</VirtualHost>   Sub Domain  <VirtualHost *:80>\n  ServerName wiki.iandi.co.za\n  DocumentRoot /var/www/wiki.iandi.co.za\n</VirtualHost>",
            "title": "Create config file"
        },
        {
            "location": "/apache/#set-apache-password-protected-directories-with-htaccess-file",
            "text": "1. Make sure Apache is configured to use .htaccess file  <Directory /var/www/swag.iandi.co.za>\n  Options Indexes Includes FollowSymLinks MultiViews\n  AllowOverride AuthConfig\n  Order allow,deny\n  Allow from all\n</Directory>  2. Create a password file with htpasswd  Create directory outside apache document root, so that only Apache can access password file. The password-file should be placed somewhere not accessible from the web. This is so that people cannot download the password file:  mkdir -p /home/john/swag.iandi.co.za  Add new user  htpasswd -c /home/john/swag.iandi.co.za/apasswords username  Allow apache user www-data to read our password file  chown www-data:www-data /home/john/swag.iandi.co.za/apasswords\nchmod 0660 /home/john/swag.iandi.co.za/apasswords  Create .htaccess file  cd /var/www/swag.iandi.co.za\nvi .htaccess  Add following text  AuthType Basic\nAuthName \"Restricted Access\"\nAuthUserFile /home/john/swag.iandi.co.za/apasswords\nRequire user username  Enable config file  sudo a2ensite iandi.co.za.conf",
            "title": "Set Apache Password Protected Directories With .htaccess File"
        },
        {
            "location": "/apache/#disable-os-identity-and-apache-version-from-errors",
            "text": "sudo vi /etc/apache2/apache2.conf    Add or Edit       ServerSignature Off \n     ServerTokens Prod    Disable Directory Listing       sudo vi /etc/apache2/sites-available/site.conf    or       sudo vi /etc/apache2/apache2.conf    Add  <Directory /var/www/html>\n    Options -Indexes\n</Directory>",
            "title": "Disable OS Identity and Apache Version from Errors"
        },
        {
            "location": "/apache/#secure-apache",
            "text": "",
            "title": "Secure Apache"
        },
        {
            "location": "/apache/#mod_security-and-mod_evasive-modules",
            "text": "Where  mod_security  works as a firewall for our web applications and allows us to monitor traffic on a real time basis. It also helps us to protect our websites or web server from brute force attacks. You can simply install  mod_security  on your server with the help of your default package installers.  Where  mod_evasive  works very efficiently, it takes one request to process and processes it very well. It prevents DDOS attacks from doing as much damage. This feature of  mod_evasive  enables it to handle the HTTP brute force and Dos or DDos attack. This module detects attacks with three methods.   If so many requests come to a same page in a few times per second.   If any child process trying to make more than 50 concurrent requests.   If any IP still trying to make new requests when its temporarily blacklisted.   Install  sudo apt-get install libapache2-mod-evasive libapache2-mod-security2   Enable Apache module  sudo a2enmod mod_security && sudo a2enmod mode_evasion  Restart Apache  sudo service apache restart  Apache security tips",
            "title": "mod_security and mod_evasive modules"
        },
        {
            "location": "/apache/#enable-gzip-compression-in-apache",
            "text": "Enable mods  a2enmod deflate;a2enmod filter  Add to Apache config  <Directory>\n  AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript image/svg+xml\n</Directory>",
            "title": "Enable GZip Compression in Apache"
        },
        {
            "location": "/apache/#enable-caching",
            "text": "Enable mods  a2enmod expires; a2enmod headers  Add to Apache config  <IfModule mod_expires.c>\n  ExpiresActive On\n  ExpiresDefault \"access plus 30 days\"\n  ExpiresByType text/html \"access plus 1 day\"\n  ExpiresByType image/gif \"access plus 30 days\"\n  ExpiresByType image/jpeg \"access plus 30 days\"\n  ExpiresByType image/png \"access plus 30 days\"\n  ExpiresByType text/css \"access plus 30 days\"\n  ExpiresByType text/javascript \"access plus 30 days\"\n  ExpiresByType application/x-javascript \"access plus 30 days\"\n  ExpiresByType text/xml \"access plus 30 days\"\n</IfModule>",
            "title": "Enable caching"
        },
        {
            "location": "/git/",
            "text": "Commands\n\n\ngit pull\n - Pull latest code from git\n\n\ngit checkout -b onelove\n - Create branch  \n\n\ngit checkout onelove\n - Change branch \n\n\ngit status\n - Check difference between git branch and local files\n\n\ngit add .\n - Adds all files in directory to be commited\n\n\ngit add jah.sh\n - Adds specific file to be commited\n\n\ngit push -f origin branch_name\n - Force git push",
            "title": "Git"
        },
        {
            "location": "/git/#commands",
            "text": "git pull  - Pull latest code from git  git checkout -b onelove  - Create branch    git checkout onelove  - Change branch   git status  - Check difference between git branch and local files  git add .  - Adds all files in directory to be commited  git add jah.sh  - Adds specific file to be commited  git push -f origin branch_name  - Force git push",
            "title": "Commands"
        },
        {
            "location": "/linux-desktop/",
            "text": "Install application from tar ball\n\n\nWe will use Sublime3 for this example\n\n\nDownload the Latest version of Sublime3\n\n\nExtract to /opt. This will be the installed directory\n\n\nsudo tar -vxjf sublime_text_3_build_3065_x64.tar.bz2 -C /opt \n\n\n\n\nCreate Soft link. This directory holds all command executables.\n\n\nsudo ln -s /opt/sublime_text_3/sublime_text /usr/bin/sublime3 \n\n\n\n\nOpen Sublime 3 from terminal\n\n\nsublime3\n\n\n\n\nCreate Gnome desktop launcher\n\n\nsudo vi sublime3 /usr/share/applications/sublime3.desktop \n\n\n\n\n[Desktop Entry]\nName=Sublime3\nExec=sublime3\nTerminal=false\nIcon=/opt/sublime_text_3/Icon/48x48/sublime-text.png\nType=Application\nCategories=TextEditor;IDE;Development\nX-Ayatana-Desktop-Shortcuts=NewWindow\n\n[NewWindow Shortcut Group]\nName=New Window\nExec=sublime -n\nTargetEnvironment=Unity",
            "title": "Linux desktop"
        },
        {
            "location": "/linux-desktop/#install-application-from-tar-ball",
            "text": "We will use Sublime3 for this example  Download the Latest version of Sublime3  Extract to /opt. This will be the installed directory  sudo tar -vxjf sublime_text_3_build_3065_x64.tar.bz2 -C /opt   Create Soft link. This directory holds all command executables.  sudo ln -s /opt/sublime_text_3/sublime_text /usr/bin/sublime3   Open Sublime 3 from terminal  sublime3",
            "title": "Install application from tar ball"
        },
        {
            "location": "/linux-desktop/#create-gnome-desktop-launcher",
            "text": "sudo vi sublime3 /usr/share/applications/sublime3.desktop   [Desktop Entry]\nName=Sublime3\nExec=sublime3\nTerminal=false\nIcon=/opt/sublime_text_3/Icon/48x48/sublime-text.png\nType=Application\nCategories=TextEditor;IDE;Development\nX-Ayatana-Desktop-Shortcuts=NewWindow\n\n[NewWindow Shortcut Group]\nName=New Window\nExec=sublime -n\nTargetEnvironment=Unity",
            "title": "Create Gnome desktop launcher"
        },
        {
            "location": "/macos/",
            "text": "Create a bootable USB\n\n\n1. Determine the device node assigned to your flash media (e.g. /dev/disk2).\n\n\ndiskutil list\n\n\n\n\n2. Unmount\n\n\ndiskutil unmountDisk /dev/diskN\n\n\n\n\n3. Write Image to USB\n\n\nsudo dd if=/path/to/downloaded.iso of=/dev/rdiskN bs=1m\n\n\n\n\nUsing \n/dev/rdisk\n instead of \n/dev/disk\n may be faster.   \n\nIf you see the error \ndd\n: \nInvalid number '1m'\n, you are using GNU \ndd\n. Use the same command but replace \nbs=1m\n with \nbs=1M\n\n\n4. Safely Remove USB when completed\n\n\ndiskutil eject /dev/diskN",
            "title": "MacOS"
        },
        {
            "location": "/macos/#create-a-bootable-usb",
            "text": "1. Determine the device node assigned to your flash media (e.g. /dev/disk2).  diskutil list  2. Unmount  diskutil unmountDisk /dev/diskN  3. Write Image to USB  sudo dd if=/path/to/downloaded.iso of=/dev/rdiskN bs=1m  Using  /dev/rdisk  instead of  /dev/disk  may be faster.    \nIf you see the error  dd :  Invalid number '1m' , you are using GNU  dd . Use the same command but replace  bs=1m  with  bs=1M  4. Safely Remove USB when completed  diskutil eject /dev/diskN",
            "title": "Create a bootable USB"
        },
        {
            "location": "/RHCE/resources/",
            "text": "Resources\n\n\n\n\n\n\nPhabTech\n\n\nLiseNet\n\n\nCertDepot",
            "title": "Resources"
        },
        {
            "location": "/RHCE/useful-cmds/",
            "text": "Useful Commands\n\n\n\n\nCheck if service is enabled\n\n\nsystemctl is-enabled sshd\n\n\n\n\nInstall auto completion\n\n\nyum -y install bash-completion\n\n\n\n\nPython breaks if no default language output is set\n\n\necho \"export LC_ALL=C\" >> ~/.bashrc\nsource ~/.bashrc",
            "title": "Useful commands"
        },
        {
            "location": "/RHCE/networking/",
            "text": "Networking\n\n\n\n\nShow connections/networks settings\n\n\nnmcli con show\n\n\n\n\nDelete connection\n\n\nnmcli con delete net-eth0\n\n\n\n\nAdd connection\n\n\nnmcli con add con-name net-eth0 ifname eth0 type ethernet ip4 192.168.1.10/24 gw4 192.168.1.1\n\n\n\n\nAdd/Modify DNS\n\n\nnmcli con mod net-eth0 ipv4.dns 8.8.8.8\n\n\n\n\nModify the IP address and default gateway\n\n\nnmcli con modify net-eth0 ipv4.addresses \"192.168.1.10/24 192.168.1.1\"\n\n\n\n\nLater versions of Redhat & Centos 7 can use this to modify the gateway:\n\n\nnmcli con modify net-eth0 ipv4.gateway 192.168.1.1\n\n\n\n\nApply settings\n\nStop and Start the connection to apply new settings\n\n\nnmcli con down net-eth0\nnmcli con up net-eth0\n\n\n\n\nShow all network details of a connection\n\n\nnmcli con show net-eth0",
            "title": "Networking"
        },
        {
            "location": "/RHCE/firewall-cmd/",
            "text": "Firewalld / Firewall-cmd\n\n\n\n\n\n\n\n\nTemporary rules get activated immidiatly\n\n\n\n\n\n\nTo Activate permanent rules one needs to reload firewalld.\n\n\n\n\n\n\nIf you dont specify a zone, your default zone will be used.\n\n\n\n\n\n\nGet Firewalld state\n\n\nfirewall-cmd --state\n\n\n\n\nGet Active Zones\n\n\nZones are a group firewall rules\n\n\nfirewall-cmd --get-active-zones\n\n\n\n\nList all active zones and rules\n\n\nfirewall-cmd --list-all\n\n\n\n\nView all firewall rules of a zone\n\n\nfirewall-cmd --zone=public --list-all\ncat /etc/firewalld/zones/public.xml\n\n\n\n\nList whitelisted services/ports\n\n\nfirewall-cmd --list-services\nfirewall-cmd --list-ports\n\n\n\n\nGet services\n\n\nLists all services a person can whitelist\n\n\nfirewall-cmd --get-services\nls /usr/lib/firewalld/services/\n\n\n\n\nWhitelist service,port and multiple ports\n\n\nfirewall-cmd --permanent --zone=public --add-service=https\nfirewall-cmd --permanent --zone=public --add-port=443/tcp\nfirewall-cmd --permanent --add-port=1000-1010/udp\n\n\n\n\nReload\n\n\nfirewall-cmd --reload\n\n\n\n\nRemove Service or Port\n\n\nfirewall-cmd --permanent --remove-service=http\nfirewall-cmd --permanent --remove-port=443/tcp",
            "title": "firewall-cmd"
        },
        {
            "location": "/RHCE/firewall-cmd/#firewalld-firewall-cmd",
            "text": "Temporary rules get activated immidiatly    To Activate permanent rules one needs to reload firewalld.    If you dont specify a zone, your default zone will be used.    Get Firewalld state  firewall-cmd --state  Get Active Zones  Zones are a group firewall rules  firewall-cmd --get-active-zones  List all active zones and rules  firewall-cmd --list-all  View all firewall rules of a zone  firewall-cmd --zone=public --list-all\ncat /etc/firewalld/zones/public.xml  List whitelisted services/ports  firewall-cmd --list-services\nfirewall-cmd --list-ports  Get services  Lists all services a person can whitelist  firewall-cmd --get-services\nls /usr/lib/firewalld/services/  Whitelist service,port and multiple ports  firewall-cmd --permanent --zone=public --add-service=https\nfirewall-cmd --permanent --zone=public --add-port=443/tcp\nfirewall-cmd --permanent --add-port=1000-1010/udp  Reload  firewall-cmd --reload  Remove Service or Port  firewall-cmd --permanent --remove-service=http\nfirewall-cmd --permanent --remove-port=443/tcp",
            "title": "Firewalld / Firewall-cmd"
        },
        {
            "location": "/RHCE/client-auth-kerb-ldap/",
            "text": "Setup IPA Server\n\n\n\n\nSetup IPA server video\n\n\nSetup IPA server blog\n\n\n\n\n\n\nClient Authentication With Kerberos to IPA Server\n\n\n\n\nInstall packages\n\n\nyum install nss-pam-ldapd pam_krb5\n\n\n\n\nConfigure authentication\n\n\nauthconfig-tui\n\n\n\n\n[*] Use LDAP\n[*] Use Kerberos\n  Next\n[*] Use TLS\nServer: ldap://ipa.example.com\nBase DN: dc=example,dc=com\n  Next\nRealm: EXAMPLE.COM\n[*] Use DNS to resolve hosts to realms\n[*] Use DNS to locate KDCs for realms\n\n\n\n\nCopy the certificate\n\n\nscp root@ipa.example.com:/root/cacert.p12 /etc/openldap/cacerts/\n\n\n\n\nUncomment the line \"#tls_reqcert never\" from nslcd.conf\n\n\nvim /etc/nslcd.conf\n\n\n\n\nApply settings\n\n\nsystemctl restart nslcd\n\n\n\n\nTest if authentication is working\n\n\ngetent passwd ldapuser1\nsu - ldapuser1",
            "title": "Client auth with kerberos & ldap"
        }
    ]
}